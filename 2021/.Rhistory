labs(y = "")
# Chunk 18
review_final <- last_fit(final_lasso, plot_split)
review_final %>%
collect_metrics()
# Chunk 19
# This will save your most recent plot
#ggsave(
#  filename = "My TidyTuesday Plot.png",
#  device = "png")
plot_final <- last_fit(final_lasso, plot_split)
plot_final %>%
collect_metrics()
plot_final %>%
collect_predictions() %>%
conf_mat(rating, .pred_class)
plot_final %>%
collect_predictions() %>%
conf_mat(binary, .pred_class)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
library(scales)
theme_set(theme_light())
# Chunk 2: Load
tt <- tt_load("2021-03-09")
# Chunk 3: Readme
tt
# Chunk 4: Glimpse
tt %>%
map(glimpse)
# Chunk 5: Wrangle
movies <- tt$movies %>%
filter(!is.na(plot))
# Chunk 6: Visualize
movies %>%
count(clean_test, binary) %>%
mutate(clean_test = fct_reorder(clean_test, n)) %>%
ggplot(aes(n, clean_test, fill = binary)) +
geom_col()
# Chunk 7
library(tidytext)
words_per_plot <- movies %>%
unnest_tokens(word, plot) %>%
count(imdb_id, name = "total_words")
words_per_plot %>%
ggplot(aes(total_words)) +
geom_histogram()
# Chunk 8
library(tidymodels)
set.seed(123)
plot_split <- initial_split(movies, strata = binary)
plot_train <- training(plot_split)
plot_test <- testing(plot_split)
# Chunk 9
library(textrecipes)
plot_rec <- recipe(binary ~ plot, data = plot_train) %>%
step_tokenize(plot) %>%
step_stopwords(plot) %>%
step_tokenfilter(plot, max_tokens = 100) %>%
step_tfidf(plot) %>%
step_normalize(all_predictors())
plot_prep <- prep(plot_rec)
plot_prep
# Chunk 10
lasso_spec <- logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
lasso_wf <- workflow() %>%
add_recipe(plot_rec) %>%
add_model(lasso_spec)
lasso_wf
# Chunk 11
lambda_grid <- grid_regular(penalty(), levels = 40)
set.seed(234)
plot_folds <- bootstraps(plot_train, strata = binary)
plot_folds
# Chunk 12
#doParallel::registerDoParallel()
set.seed(345)
lasso_grid <- tune_grid(
lasso_wf,
resamples = plot_folds,
grid = lambda_grid,
metrics = metric_set(roc_auc, ppv, npv)
)
# Chunk 13
lasso_grid %>%
collect_metrics()
# Chunk 14
lasso_grid %>%
collect_metrics() %>%
ggplot(aes(penalty, mean, color = .metric)) +
geom_line(size = 1.5, show.legend = FALSE) +
facet_wrap(~.metric) +
scale_x_log10()
# Chunk 15
best_auc <- lasso_grid %>%
select_best("roc_auc")
best_auc
# Chunk 16
final_lasso <- finalize_workflow(lasso_wf, best_auc)
final_lasso
# Chunk 17
library(vip)
final_lasso %>%
fit(plot_train) %>%
pull_workflow_fit() %>%
vi(lambda = best_auc$penalty) %>%
group_by(Sign) %>%
top_n(10, wt = abs(Importance)) %>%
ungroup() %>%
mutate(
Importance = abs(Importance),
Variable = str_remove(Variable, "tfidf_plot_"),
Variable = fct_reorder(Variable, Importance)
) %>%
ggplot(aes(Importance, Variable, fill = Sign)) +
geom_col(show.legend = FALSE) +
facet_wrap(~Sign, scales = "free_y") +
labs(y = "")
# Chunk 18
plot_final <- last_fit(final_lasso, plot_split)
plot_final %>%
collect_metrics()
# Chunk 19
plot_final %>%
collect_predictions() %>%
conf_mat(binary, .pred_class)
# Chunk 20
# This will save your most recent plot
#ggsave(
#  filename = "My TidyTuesday Plot.png",
#  device = "png")
final_lasso %>%
fit(plot_train) %>%
pull_workflow_fit() %>%
vi(lambda = best_auc$penalty) %>%
group_by(Sign) %>%
top_n(20, wt = abs(Importance)) %>%
ungroup() %>%
mutate(
Importance = abs(Importance),
Variable = str_remove(Variable, "tfidf_plot_"),
Variable = fct_reorder(Variable, Importance)
) %>%
ggplot(aes(Importance, Variable, fill = Sign)) +
geom_col(show.legend = FALSE) +
facet_wrap(~Sign, scales = "free_y") +
labs(y = "")
final_lasso %>%
fit(plot_train) %>%
pull_workflow_fit() %>%
vi(lambda = best_auc$penalty) %>%
group_by(Sign) %>%
top_n(20, wt = abs(Importance)) %>%
ungroup() %>%
mutate(
Importance = abs(Importance),
Variable = str_remove(Variable, "tfidf_plot_"),
Variable = fct_reorder(Variable, Importance)
) %>%
ggplot(aes(Importance, Variable, fill = Sign)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ifelse(Sign == "NEG", "Fail", "Pass"),
scales = "free_y") +
labs(y = "",
title = "Bechdel Test - Movies with Quality Female Characters",
subtitle = "Top 20 most important words from the plot description")
final_lasso %>%
fit(plot_train) %>%
pull_workflow_fit() %>%
vi(lambda = best_auc$penalty) %>%
group_by(Sign) %>%
top_n(20, wt = abs(Importance)) %>%
ungroup() %>%
mutate(
Importance = abs(Importance),
Variable = str_remove(Variable, "tfidf_plot_"),
Variable = fct_reorder(Variable, Importance)
) %>%
ggplot(aes(Importance, Variable, fill = Sign)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ifelse(Sign == "NEG", "Fail", "Pass"),
scales = "free_y") +
labs(y = "",
title = "Bechdel Test - Movies with Quality Female Characters",
subtitle = "Top 20 most important words from the plot description",
caption = "Source: FiveThirtyEight  |  Analysis: Tony Galvan (@GDataScience1")
# This will save your most recent plot
ggsave(
filename = "2021_03_09_tidy_tuesday.png",
device = "png")
# This will save your most recent plot
ggsave(
filename = "2021_03_09_tidy_tuesday.png",
device = "png")
final_lasso %>%
fit(plot_train) %>%
pull_workflow_fit() %>%
vi(lambda = best_auc$penalty) %>%
group_by(Sign) %>%
top_n(20, wt = abs(Importance)) %>%
ungroup() %>%
mutate(
Importance = abs(Importance),
Variable = str_remove(Variable, "tfidf_plot_"),
Variable = fct_reorder(Variable, Importance)
) %>%
ggplot(aes(Importance, Variable, fill = Sign)) +
geom_col(show.legend = FALSE) +
scale_fill_manual(values = c("#27476E","#AA7BC3")) +
facet_wrap(~ifelse(Sign == "NEG", "Fail", "Pass"),
scales = "free_y") +
labs(y = "",
title = "Bechdel Test - Movies with Quality Female Characters",
subtitle = "Top 20 most important words from the plot description",
caption = "Source: FiveThirtyEight  |  Analysis: Tony Galvan (@GDataScience1")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
library(scales)
theme_set(theme_light())
# Chunk 2: Load
tt <- tt_load("2021-03-09")
# Chunk 3: Readme
tt
# Chunk 4: Glimpse
tt %>%
map(glimpse)
# Chunk 5: Wrangle
movies <- tt$movies %>%
filter(!is.na(plot))
# Chunk 6: Visualize
movies %>%
count(clean_test, binary) %>%
mutate(clean_test = fct_reorder(clean_test, n)) %>%
ggplot(aes(n, clean_test, fill = binary)) +
geom_col()
# Chunk 7
library(tidytext)
words_per_plot <- movies %>%
unnest_tokens(word, plot) %>%
count(imdb_id, name = "total_words")
words_per_plot %>%
ggplot(aes(total_words)) +
geom_histogram()
# Chunk 8
library(tidymodels)
set.seed(123)
plot_split <- initial_split(movies, strata = binary)
plot_train <- training(plot_split)
plot_test <- testing(plot_split)
# Chunk 9
library(textrecipes)
plot_rec <- recipe(binary ~ plot, data = plot_train) %>%
step_tokenize(plot) %>%
step_stopwords(plot) %>%
step_tokenfilter(plot, max_tokens = 100) %>%
step_tfidf(plot) %>%
step_normalize(all_predictors())
plot_prep <- prep(plot_rec)
plot_prep
# Chunk 10
lasso_spec <- logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
lasso_wf <- workflow() %>%
add_recipe(plot_rec) %>%
add_model(lasso_spec)
lasso_wf
# Chunk 11
lambda_grid <- grid_regular(penalty(), levels = 40)
set.seed(234)
plot_folds <- bootstraps(plot_train, strata = binary)
plot_folds
# Chunk 12
#doParallel::registerDoParallel()
set.seed(345)
lasso_grid <- tune_grid(
lasso_wf,
resamples = plot_folds,
grid = lambda_grid,
metrics = metric_set(roc_auc, ppv, npv)
)
# Chunk 13
lasso_grid %>%
collect_metrics()
# Chunk 14
lasso_grid %>%
collect_metrics() %>%
ggplot(aes(penalty, mean, color = .metric)) +
geom_line(size = 1.5, show.legend = FALSE) +
facet_wrap(~.metric) +
scale_x_log10()
# Chunk 15
best_auc <- lasso_grid %>%
select_best("roc_auc")
best_auc
# Chunk 16
final_lasso <- finalize_workflow(lasso_wf, best_auc)
final_lasso
# Chunk 17
library(vip)
final_lasso %>%
fit(plot_train) %>%
pull_workflow_fit() %>%
vi(lambda = best_auc$penalty) %>%
group_by(Sign) %>%
top_n(20, wt = abs(Importance)) %>%
ungroup() %>%
mutate(
Importance = abs(Importance),
Variable = str_remove(Variable, "tfidf_plot_"),
Variable = fct_reorder(Variable, Importance)
) %>%
ggplot(aes(Importance, Variable, fill = Sign)) +
geom_col(show.legend = FALSE) +
scale_fill_manual(values = c("#27476E","#AA7BC3")) +
facet_wrap(~ifelse(Sign == "NEG", "Fail", "Pass"),
scales = "free_y") +
labs(y = "",
title = "Bechdel Test - Movies with Quality Female Characters",
subtitle = "Top 20 most important words from the plot description",
caption = "Source: FiveThirtyEight  |  Analysis: Tony Galvan (@GDataScience1")
# Chunk 18
plot_final <- last_fit(final_lasso, plot_split)
plot_final %>%
collect_metrics()
# Chunk 19
plot_final %>%
collect_predictions() %>%
conf_mat(binary, .pred_class)
# Chunk 20
# This will save your most recent plot
ggsave(
filename = "2021_03_09_tidy_tuesday.png",
device = "png")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
library(scales)
theme_set(theme_light())
# Chunk 2: Load
tt <- tt_load("2021-03-02")
# Chunk 3: Readme
tt
# Chunk 4: Glimpse
tt %>%
map(glimpse)
# Chunk 5: Wrangle
superbowl <- tt$youtube
# Chunk 6
superbowl %>%
count(brand, sort = TRUE) %>%
mutate(brand = fct_reorder(brand, n)) %>%
ggplot(aes(n, brand, fill = brand)) +
geom_col()
# Chunk 7: Visualize
superbowl %>%
group_by(year) %>%
summarize(funny = sum(funny),
show_product_quickly = sum(show_product_quickly),
patriotic = sum(patriotic),
celebrity = sum(celebrity),
danger = sum(danger),
animals = sum(animals),
use_sex = sum(use_sex)) %>%
pivot_longer(cols = c("funny":"use_sex"),
names_to = "attribute",
values_to = "count") %>%
#mutate(attribute = fct_relevel(attribute, )) %>%
ggplot(aes(year, count, color = attribute)) +
geom_point(alpha = 0.25) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~attribute) +
guides(color = "none") +
labs(x = "",
y = "# of commercials",
title = "Superbowl Commercials",
subtitle = "More celebrities and patriotic. Less funny and sex",
caption = "Source: FiveThirtyEight  |  Analysis: Tony Galvan (@GDataScience1)")
# Chunk 8
# This will save your most recent plot
ggsave(
filename = "2021_03_02_tidy_tuesday.png",
device = "png")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
library(scales)
theme_set(theme_light())
# Chunk 2: Load
tt <- tt_load("2021-03-09")
# Chunk 3: Readme
tt
# Chunk 4: Glimpse
tt %>%
map(glimpse)
# Chunk 5: Wrangle
movies <- tt$movies %>%
filter(!is.na(plot))
# Chunk 6: Visualize
movies %>%
count(clean_test, binary) %>%
mutate(clean_test = fct_reorder(clean_test, n)) %>%
ggplot(aes(n, clean_test, fill = binary)) +
geom_col()
# Chunk 7
library(tidytext)
words_per_plot <- movies %>%
unnest_tokens(word, plot) %>%
count(imdb_id, name = "total_words")
words_per_plot %>%
ggplot(aes(total_words)) +
geom_histogram()
# Chunk 8
library(tidymodels)
set.seed(123)
plot_split <- initial_split(movies, strata = binary)
plot_train <- training(plot_split)
plot_test <- testing(plot_split)
# Chunk 9
library(textrecipes)
plot_rec <- recipe(binary ~ plot, data = plot_train) %>%
step_tokenize(plot) %>%
step_stopwords(plot) %>%
step_tokenfilter(plot, max_tokens = 100) %>%
step_tfidf(plot) %>%
step_normalize(all_predictors())
plot_prep <- prep(plot_rec)
plot_prep
# Chunk 10
lasso_spec <- logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
lasso_wf <- workflow() %>%
add_recipe(plot_rec) %>%
add_model(lasso_spec)
lasso_wf
# Chunk 11
lambda_grid <- grid_regular(penalty(), levels = 40)
set.seed(234)
plot_folds <- bootstraps(plot_train, strata = binary)
plot_folds
# Chunk 12
#doParallel::registerDoParallel()
set.seed(345)
lasso_grid <- tune_grid(
lasso_wf,
resamples = plot_folds,
grid = lambda_grid,
metrics = metric_set(roc_auc, ppv, npv)
)
# Chunk 13
lasso_grid %>%
collect_metrics()
# Chunk 14
lasso_grid %>%
collect_metrics() %>%
ggplot(aes(penalty, mean, color = .metric)) +
geom_line(size = 1.5, show.legend = FALSE) +
facet_wrap(~.metric) +
scale_x_log10()
# Chunk 15
best_auc <- lasso_grid %>%
select_best("roc_auc")
best_auc
# Chunk 16
final_lasso <- finalize_workflow(lasso_wf, best_auc)
final_lasso
# Chunk 17
library(vip)
final_lasso %>%
fit(plot_train) %>%
pull_workflow_fit() %>%
vi(lambda = best_auc$penalty) %>%
group_by(Sign) %>%
top_n(20, wt = abs(Importance)) %>%
ungroup() %>%
mutate(
Importance = abs(Importance),
Variable = str_remove(Variable, "tfidf_plot_"),
Variable = fct_reorder(Variable, Importance)
) %>%
ggplot(aes(Importance, Variable, fill = Sign)) +
geom_col(show.legend = FALSE) +
scale_fill_manual(values = c("#27476E","#AA7BC3")) +
facet_wrap(~ifelse(Sign == "NEG", "Fail", "Pass"),
scales = "free_y") +
labs(y = "",
title = "Bechdel Test - Movies with Quality Female Characters",
subtitle = "Top 20 most important words from the plot description",
caption = "Source: FiveThirtyEight  |  Analysis: Tony Galvan (@GDataScience1")
# Chunk 18
plot_final <- last_fit(final_lasso, plot_split)
plot_final %>%
collect_metrics()
# Chunk 19
plot_final %>%
collect_predictions() %>%
conf_mat(binary, .pred_class)
# Chunk 20
# This will save your most recent plot
ggsave(
filename = "2021_03_09_tidy_tuesday.png",
device = "png")
so_wf
lasso_wf
lasso_grid %>%
collect_metrics()
