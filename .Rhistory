geom_smooth(method = "loess", se = FALSE)
library(tidyverse)
library(babynames)
theme_set(theme_light())
babynames %>%
group_by(year, name) %>%
summarize(n = sum(n)) %>%
filter(name %in% c("Ida", "Gertrude")) %>%
ggplot(aes(year, n, color = name)) +
geom_point(alpha = 0.15) +
geom_smooth(method = "loess", se = FALSE)
View(babynames)
babynames %>%
group_by(year, name) %>%
summarize(n = sum(n)) %>%
filter(name %in% c("Ida", "Gertrude", "Mary", "John")) %>%
ggplot(aes(year, n, color = name)) +
geom_point(alpha = 0.15) +
geom_smooth(method = "loess", se = FALSE)
library(tidyverse)
library(tidytuesdayR)
library(scales)
theme_set(theme_light())
tuesdata <- tt_load('2020-06-16')
slave_routes <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-06-16/slave_routes.csv')
library(grid)
library(ggraph)
set.seed(2020)
slave_routes %>%
count(port_origin, port_arrival, sort = TRUE) %>%
filter(port_origin != port_arrival) %>%
head(40) %>%
ggraph(layout = "fr") +
geom_edge_link(aes(width = n),
arrow = arrow(type = "closed",
length = unit(.1, "inch"))) +
geom_node_point() +
geom_node_text(aes(label = name), repel = TRUE) +
scale_edge_width_continuous(range = c(.5, 4)) +
labs(title = "Common slave routes",
edge_width = "# of ships")
slave_routes %>%
filter(!is.na(ship_name), !is.na(n_slaves_arrived)) %>%
filter(fct_lump(ship_name, 12) != "Other") %>%
mutate(ship_name = fct_reorder(ship_name, n_slaves_arrived)) %>%
ggplot(aes(n_slaves_arrived, ship_name)) +
geom_boxplot()
slave_routes %>%
filter(!is.na(port_origin)) %>%
mutate(port_origin = str_trunc(port_origin, 25),
port_origin = fct_lump(port_origin, 24),
port_origin = fct_reorder(port_origin, year_arrival)) %>%
count(port_origin,
decade = 10 * (year_arrival %/% 10)) %>%
ggplot(aes(decade, n)) +
geom_line() +
facet_wrap(~ port_origin) +
geom_vline(xintercept = c(1807), lty = 2) +
theme(strip.text = element_text(size = 6))
slave_routes %>%
filter(port_origin == "New York") %>%
arrange(desc(year_arrival)) %>%
View()
slave_routes %>%
group_by(port_origin) %>%
summarize(n_ships = n(),
total_recorded = sum(n_slaves_arrived, na.rm = TRUE),
pct_missing = mean(is.na(n_slaves_arrived)),
estimated_total = mean(n_slaves_arrived, na.rm = TRUE) * n()) %>%
arrange(desc(n_ships))
census <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-06-16/census.csv')
census_gathered <- census %>%
mutate(other = total - white - black) %>%
arrange(year) %>%
gather(racial_category, population, white, black_free, black_slaves, other)
census_gathered %>%
filter(region == "USA Total") %>%
ggplot(aes(year, population, fill = racial_category)) +
geom_col() +
scale_y_continuous(labels = comma) +
labs(x = "Year",
y = "Census Population",
fill = "Racial category",
title = "Census racial makeup of US, 1790-1870",
subtitle = "No 'other' category existed before 1860")
census_gathered %>%
filter(region != "USA Total", !is.na(division)) %>%
mutate(division = fct_reorder(division, -population, sum)) %>%
ggplot(aes(year, population, fill = racial_category)) +
geom_col() +
scale_y_continuous(labels = comma) +
facet_wrap(~ division) +
labs(x = "Year",
y = "Census Population",
fill = "Racial category",
title = "Census racial makeup of US, 1790-1870",
subtitle = "No 'other' category existed before 1860")
census_gathered %>%
filter(region != "USA Total", !is.na(division)) %>%
mutate(division = fct_reorder(division, -population, sum)) %>%
group_by(division, year) %>%
mutate(percent = population / sum(population)) %>%
ggplot(aes(year, percent, fill = racial_category)) +
geom_col() +
scale_y_continuous(labels = percent) +
facet_wrap(~ division) +
labs(x = "Year",
y = "% of Census Population",
fill = "Racial category",
title = "Census racial makeup of US, 1790-1870",
subtitle = "No 'other' category existed before 1860")
library(ggwordcloud)
name_counts <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-06-16/african_names.csv') %>%
count(name, gender, sort = TRUE)
wordcloud(name_counts$name, name_counts$n)
name_counts %>%
head(100) %>%
ggplot(aes(label = name, size = n, color = gender)) +
geom_text_wordcloud()
install.packages(c("ggwordcloud", "tidytuesdayR"))
library(ggwordcloud)
name_counts <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-06-16/african_names.csv') %>%
count(name, gender, sort = TRUE)
wordcloud(name_counts$name, name_counts$n)
name_counts %>%
head(100) %>%
ggplot(aes(label = name, size = n, color = gender)) +
geom_text_wordcloud()
knitr::opts_chunk$set(echo = TRUE)
library(tidymodels)
library(palmerpenguins)
library(tidyverse)
theme_set(theme_minimal())
install.packages("palmerpenguins")
library(palmerpenguins)
# load data
data(penguins)
# create a recipe
penguin_recipe <-
recipe(~., data = penguins) %>%
update_role(year, species, island, sex, new_role = "id") %>%
step_naomit(all_predictors()) %>%
step_normalize(all_predictors()) %>%
step_pca(all_predictors(), id = "pca") %>%
prep()
penguin_recipe
tidy(penguin_recipe)
tidy(penguin_recipe, id = "pca") # this is equivalent to
tidy(penguin_recipe, 3)
penguin_recipe %>%
tidy(id = "pca") %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
theme_set(theme_minimal())
penguin_recipe %>%
tidy(id = "pca") %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
penguin_pca <-
penguin_recipe %>%
tidy(id = "pca")
# get pca loadings into wider format
pca_wider <- penguin_pca %>%
pivot_wider(names_from = component, id_cols = terms)
pca_wider
# We also need to go back to our prepped penguin recipe, prepped_penguins,
# and recipes::juice() it to get the PCA scores back.
penguin_recipe
juice(penguin_recipe)
pca_plot <-
juice(penguin_recipe) %>%
ggplot(aes(PC1, PC2)) +
geom_point(aes(color = species, shape = species),
alpha = 0.8,
size = 2) +
scale_colour_manual(values = c("darkorange","purple","cyan4"))
pca_plot
# define arrow style
arrow_style <- arrow(length = unit(.05, "inches"),
type = "closed")
pca_plot +
geom_segment(data = pca_wider,
aes(xend = PC1, yend = PC2),
x = 0,
y = 0,
arrow = arrow_style) +
geom_text(data = pca_wider,
aes(x = PC1, y = PC2, label = terms),
hjust = 0,
vjust = 1,
size = 5,
color = '#0A537D') # confirms that penguins with longer flippers, higher body mass, and longer bill length,
# have shorter bill depth
# This scatter plot confirms this
penguins %>%
ggplot(aes(x = body_mass_g, y = bill_depth_mm, colour = species)) +
geom_point() +
scale_colour_manual(values = c("darkorange","purple", "cyan4"))
?tidytuesdayR::use_tidytemplate()
tidytuesdayR::use_tidytemplate(name = "women.rmd")
tidytuesdayR::use_tidytemplate()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
tt <- tt_load("2020-12-08")
tt <- tt_load("2020-12-08")
tt %>%
map(glimpse)
women_raw <- tt$women
women <- women_raw
women %>%
count(category, sort = TRUE) %>%
mutate(category = fct_reorder(category, n)) %>%
ggplot(aes(n, category, fill = category)) +
geom_col(show.legend = FALSE)
women %>%
mutate(role = fct_lump(role,10)) %>%
filter(role != "Other") %>%
count(role, sort = TRUE) %>%
mutate(role = fct_reorder(role, n)) %>%
ggplot(aes(n, role, fill = role)) +
geom_col(show.legend = FALSE)
library(gt)
t <- women %>%
select(img, name, country, category, role, description) %>%
#group_by(category) %>%
gt(rowname_col = "name") %>%
text_transform(
locations = cells_body(
vars(img)
),
fn = function(x) {
web_image(
url = x,
height = 50
)
}
) %>%
cols_width(
vars(img) ~ px(50),
vars(country) ~ px(100),
vars(category) ~ px(100),
vars(role) ~ px(100),
vars(description) ~ px(300),
everything() ~ px(125)
) %>%
cols_label(
img = "",
country = "COUNTRY",
category = "CATEGORY",
role = "ROLE",
description = "DESCRIPTION"
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_column_labels(everything())
) %>%
tab_options(
table.font.size = 12
) %>%
tab_header(title = md("**WOMEN OF 2020**")) %>%
tab_source_note(source_note = md("**Source**: BBC  |  **Designed By**: Tony Galvan (@GDataScience1)<br>**Inspiration**: @thomas_mock"))
t
women %>%
count(category, sort = TRUE) %>%
mutate(category = fct_reorder(category, n)) %>%
ggplot(aes(n, category, fill = category)) +
geom_col(show.legend = FALSE)
women %>%
mutate(role = fct_lump(role,10)) %>%
filter(role != "Other") %>%
count(role, sort = TRUE) %>%
mutate(role = fct_reorder(role, n)) %>%
ggplot(aes(n, role, fill = role)) +
geom_col(show.legend = FALSE)
library(gt)
t <- women %>%
select(img, name, country, category, role, description) %>%
#group_by(category) %>%
gt(rowname_col = "name") %>%
text_transform(
locations = cells_body(
vars(img)
),
fn = function(x) {
web_image(
url = x,
height = 50
)
}
) %>%
cols_width(
vars(img) ~ px(50),
vars(country) ~ px(100),
vars(category) ~ px(100),
vars(role) ~ px(100),
vars(description) ~ px(300),
everything() ~ px(125)
) %>%
cols_label(
img = "",
country = "COUNTRY",
category = "CATEGORY",
role = "ROLE",
description = "DESCRIPTION"
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_column_labels(everything())
) %>%
tab_options(
table.font.size = 12
) %>%
tab_header(title = md("**WOMEN OF 2020**")) %>%
tab_source_note(source_note = md("**Source**: BBC  |  **Designed By**: Tony Galvan (@GDataScience1)<br>**Inspiration**: @thomas_mock"))
t
library(gt)
women %>%
gt()
t <- women %>%
select(img, name, country, category, role, description) %>%
#group_by(category) %>%
gt(rowname_col = "name") %>%
text_transform(
locations = cells_body(
vars(img)
),
fn = function(x) {
web_image(
url = x,
height = 50
)
}
) %>%
cols_width(
vars(img) ~ px(50),
vars(country) ~ px(100),
vars(category) ~ px(100),
vars(role) ~ px(100),
vars(description) ~ px(300),
everything() ~ px(125)
) %>%
cols_label(
img = "",
country = "COUNTRY",
category = "CATEGORY",
role = "ROLE",
description = "DESCRIPTION"
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_column_labels(everything())
) %>%
tab_options(
table.font.size = 12
) %>%
tab_header(title = md("**WOMEN OF 2020**")) %>%
tab_source_note(source_note = md("**Source**: BBC  |  **Designed By**: Tony Galvan (@GDataScience1)<br>**Inspiration**: @thomas_mock"))
t
women %>%
gt()
women %>%
mutate(role = fct_lump(role,10)) %>%
filter(role != "Other") %>%
count(role, sort = TRUE) %>%
mutate(role = fct_reorder(role, n)) %>%
ggplot(aes(n, role, fill = role)) +
geom_col(show.legend = FALSE)
library(tidyverse)
library(tidytuesdayR)
library(plotly) # for interactive sunburst chart
library(htmlwidgets) # to save widget
tt <- tt_load("2020-12-08")
women <- tt$women
women <- tt$women
# prep dataframe1
labels <- c("All", "Creativity", "Identity", "Knowledge", "Leadership")
values <- c(1, 21, 17, 32, 29)
parents <- c("", "", "", "", "")
ids <- c("All", "Creativity", "Identity", "Knowledge", "Leadership")
img <- c("", "", "", "", "")
country <- c("various", "various", "various", "various", "various")
role <- c("various", "various", "various", "various", "various")
description <- c("n = 1", "n = 21", "n = 17", "n = 32", "n = 29")
colors <- c("#e8f72f", "#9d02d7", "#34dd26", "#0000ff", "#ffb14e")
df1 <- data.frame(labels, values, parents, ids, img, country, role, description, colors)
# prep dataframe2
df2 <- women %>%
rename(labels = name,
parents = category) %>%
mutate(values = rep(1),
ids = paste(parents, " - ", labels)) %>%
mutate(colors = case_when(
parents == "All" ~ "#e8f72f",
parents == "Creativity" ~ "#9d02d7",
parents == "Identity" ~ "#34dd26",
parents == "Knowledge" ~ "#0000ff",
parents == "Leadership" ~ "#ffb14e"
)) %>%
select(labels, values, parents, ids, img, country, role, description, colors)
# bind dataframes
women2 <- rbind(df1, df2)
# break up long descriptive label for sunburst chart hover text
women2$description2 <- stringr::str_wrap(women2$description, width = 100)
fig <- plot_ly(
women2,
ids = ~ids,
labels = ~labels,
parents = ~parents,
type = 'sunburst',
insidetextorientation='radial',
hovertemplate = glue::glue(
"<b>{women2$labels}</b><br>",
"<b>Country: {women2$country}</b><br>",
"<b>Role: {women2$role}</b><br>",
"{women2$description2}",
"<extra></extra>"),
marker = list(colors = ~colors)
) %>%
layout(title = list(text = "<b>The BBC's 100 women of 2020</b>")) %>%
layout(paper_bgcolor='rgba(60,174,163,1)')
fig
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
library(scales)
library(lubridate)
library(prophet)
# Chunk 2: Load
tt <- tt_load("2020-12-22")
# Chunk 3: Readme
tt
# Chunk 4: Glimpse
tt %>%
map(glimpse)
# Chunk 5: Wrangle
big_mac <- tt$`big-mac` %>%
rename(country = name)
glimpse(big_mac)
# Chunk 6: Visualize
us_big_mac <- big_mac %>%
filter(country == "United States") %>%
select(ds = date,
y = local_price)
fit_prophet <- prophet(us_big_mac)
future <- make_future_dataframe(fit_prophet, periods = 5, freq = 'year')
fcast_prophet <- predict(fit_prophet, future)
fcast_prophet %>%
ggplot(aes(ds, yhat,
color = ifelse(
ds <= today(), "actual", "forecast"
))) +
geom_ribbon(
data = fcast_prophet %>%
filter(ds > today()),
aes(ymin = yhat_lower, ymax = yhat_upper),
fill = "gray75",
color = NA,
size = 0,
alpha = 0.8
) +
geom_line(size = 1) +
scale_y_continuous(labels = dollar_format()) +
scale_color_manual(values = c("#FFC72C", "#DA291C")) +
theme(legend.position = "bottom") +
labs(
x = "",
y = "Price",
color = "",
title = "US Big Mac price will increase by $1 by 2025",
subtitle = "Forecast created using a Prophet model",
caption = "Source: TheEconomist  |  Analysis: Tony Galvan (@GDataScience1)"
)
# Chunk 7
# This will save your most recent plot
ggsave(
filename = "My TidyTuesday Plot.png",
device = "png")
setwd("~/GitHub/tidytuesday")
# This will save your most recent plot
ggsave(
filename = "GDataScience1_tt52.png",
device = "png")
# This will save your most recent plot
ggsave(
filename = "GDataScience1_tt52.png",
device = "png",width = 4, units = "in")
# This will save your most recent plot
ggsave(
filename = "GDataScience1_tt52.png",
device = "png",width = 4.5, units = "in")
# This will save your most recent plot
ggsave(
filename = "GDataScience1_tt52.png",
device = "png",width = 4.25, units = "in")
# This will save your most recent plot
ggsave(
filename = "GDataScience1_tt52.png",
device = "png", width = 4.25, height = 4.25, units = "in")
