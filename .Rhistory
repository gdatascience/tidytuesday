vars(category) ~ px(100),
vars(role) ~ px(100),
vars(description) ~ px(300),
everything() ~ px(125)
) %>%
cols_label(
img = "",
country = "COUNTRY",
category = "CATEGORY",
role = "ROLE",
description = "DESCRIPTION"
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_column_labels(everything())
) %>%
tab_options(
table.font.size = 12
) %>%
tab_header(title = md("**WOMEN OF 2020**")) %>%
tab_source_note(source_note = md("**Source**: BBC  |  **Designed By**: Tony Galvan (@GDataScience1)<br>**Inspiration**: @thomas_mock"))
t
women %>%
count(category, sort = TRUE) %>%
mutate(category = fct_reorder(category, n)) %>%
ggplot(aes(n, category, fill = category)) +
geom_col(show.legend = FALSE)
women %>%
mutate(role = fct_lump(role,10)) %>%
filter(role != "Other") %>%
count(role, sort = TRUE) %>%
mutate(role = fct_reorder(role, n)) %>%
ggplot(aes(n, role, fill = role)) +
geom_col(show.legend = FALSE)
library(gt)
t <- women %>%
select(img, name, country, category, role, description) %>%
#group_by(category) %>%
gt(rowname_col = "name") %>%
text_transform(
locations = cells_body(
vars(img)
),
fn = function(x) {
web_image(
url = x,
height = 50
)
}
) %>%
cols_width(
vars(img) ~ px(50),
vars(country) ~ px(100),
vars(category) ~ px(100),
vars(role) ~ px(100),
vars(description) ~ px(300),
everything() ~ px(125)
) %>%
cols_label(
img = "",
country = "COUNTRY",
category = "CATEGORY",
role = "ROLE",
description = "DESCRIPTION"
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_column_labels(everything())
) %>%
tab_options(
table.font.size = 12
) %>%
tab_header(title = md("**WOMEN OF 2020**")) %>%
tab_source_note(source_note = md("**Source**: BBC  |  **Designed By**: Tony Galvan (@GDataScience1)<br>**Inspiration**: @thomas_mock"))
t
library(gt)
women %>%
gt()
t <- women %>%
select(img, name, country, category, role, description) %>%
#group_by(category) %>%
gt(rowname_col = "name") %>%
text_transform(
locations = cells_body(
vars(img)
),
fn = function(x) {
web_image(
url = x,
height = 50
)
}
) %>%
cols_width(
vars(img) ~ px(50),
vars(country) ~ px(100),
vars(category) ~ px(100),
vars(role) ~ px(100),
vars(description) ~ px(300),
everything() ~ px(125)
) %>%
cols_label(
img = "",
country = "COUNTRY",
category = "CATEGORY",
role = "ROLE",
description = "DESCRIPTION"
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_column_labels(everything())
) %>%
tab_options(
table.font.size = 12
) %>%
tab_header(title = md("**WOMEN OF 2020**")) %>%
tab_source_note(source_note = md("**Source**: BBC  |  **Designed By**: Tony Galvan (@GDataScience1)<br>**Inspiration**: @thomas_mock"))
t
women %>%
gt()
women %>%
mutate(role = fct_lump(role,10)) %>%
filter(role != "Other") %>%
count(role, sort = TRUE) %>%
mutate(role = fct_reorder(role, n)) %>%
ggplot(aes(n, role, fill = role)) +
geom_col(show.legend = FALSE)
library(tidyverse)
library(tidytuesdayR)
library(plotly) # for interactive sunburst chart
library(htmlwidgets) # to save widget
tt <- tt_load("2020-12-08")
women <- tt$women
women <- tt$women
# prep dataframe1
labels <- c("All", "Creativity", "Identity", "Knowledge", "Leadership")
values <- c(1, 21, 17, 32, 29)
parents <- c("", "", "", "", "")
ids <- c("All", "Creativity", "Identity", "Knowledge", "Leadership")
img <- c("", "", "", "", "")
country <- c("various", "various", "various", "various", "various")
role <- c("various", "various", "various", "various", "various")
description <- c("n = 1", "n = 21", "n = 17", "n = 32", "n = 29")
colors <- c("#e8f72f", "#9d02d7", "#34dd26", "#0000ff", "#ffb14e")
df1 <- data.frame(labels, values, parents, ids, img, country, role, description, colors)
# prep dataframe2
df2 <- women %>%
rename(labels = name,
parents = category) %>%
mutate(values = rep(1),
ids = paste(parents, " - ", labels)) %>%
mutate(colors = case_when(
parents == "All" ~ "#e8f72f",
parents == "Creativity" ~ "#9d02d7",
parents == "Identity" ~ "#34dd26",
parents == "Knowledge" ~ "#0000ff",
parents == "Leadership" ~ "#ffb14e"
)) %>%
select(labels, values, parents, ids, img, country, role, description, colors)
# bind dataframes
women2 <- rbind(df1, df2)
# break up long descriptive label for sunburst chart hover text
women2$description2 <- stringr::str_wrap(women2$description, width = 100)
fig <- plot_ly(
women2,
ids = ~ids,
labels = ~labels,
parents = ~parents,
type = 'sunburst',
insidetextorientation='radial',
hovertemplate = glue::glue(
"<b>{women2$labels}</b><br>",
"<b>Country: {women2$country}</b><br>",
"<b>Role: {women2$role}</b><br>",
"{women2$description2}",
"<extra></extra>"),
marker = list(colors = ~colors)
) %>%
layout(title = list(text = "<b>The BBC's 100 women of 2020</b>")) %>%
layout(paper_bgcolor='rgba(60,174,163,1)')
fig
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
library(janitor)
library(scales)
theme_set(theme_light())
# Chunk 2: Load
tt <- tt_load("2021-01-19")
# Chunk 3: Readme
tt
# Chunk 4: Glimpse
tt %>%
map(glimpse)
# Chunk 5: Wrangle
gender <- tt$gender %>%
clean_names() %>%
filter(county != "Total") %>%
select(-intersex) %>%
mutate(county = ifelse(county == "Nairobi City", "Nairobi", county),
sub_county = str_to_upper(str_replace_all(county, " ", "")),
pct_male = male/total,
pct_female = female/total)
crops <- tt$crops %>%
clean_names() %>%
mutate(sub_county = str_replace_all(sub_county, " ", ""))
households <- tt$households %>%
clean_names() %>%
mutate(county = str_trim(county),
county = ifelse(county == "NairobiCity", "Nairobi", county),
sub_county = str_to_upper(county))
census <- gender %>%
inner_join(crops, by = "sub_county") %>%
inner_join(households %>% select(-county), by = "sub_county")
# Chunk 6: Visualize
census %>%
top_n(10, wt = -pct_female) %>%
mutate(county = fct_reorder(county, pct_female)) %>%
ggplot(aes(pct_female, county, fill = county)) +
geom_col(show.legend = FALSE) +
scale_x_continuous(labels = percent_format()) +
labs(x = "% female",
y = "",
title = "Kenya Census",
subtitle = "10 counties with lowest percentage of females",
caption = "Source: rKenyaCensus  |  Analysis: Tony Galvan (@GDataScience1)")
census %>%
top_n(10, wt = pct_female) %>%
mutate(county = fct_reorder(county, pct_female)) %>%
ggplot(aes(pct_female, county, fill = county)) +
geom_col(show.legend = FALSE) +
scale_x_continuous(labels = percent_format()) +
labs(x = "% female",
y = "",
title = "Kenya Census",
subtitle = "10 counties with highest percentage of females",
caption = "Source: rKenyaCensus  |  Analysis: Tony Galvan (@GDataScience1)")
census %>%
top_n(10, wt = average_household_size) %>%
mutate(county = fct_reorder(county, average_household_size)) %>%
ggplot(aes(average_household_size, county, fill = county)) +
geom_col(show.legend = FALSE) +
labs(x = "Average household size",
y = "",
title = "Kenya Census",
subtitle = "10 counties with the largest average household size",
caption = "Source: rKenyaCensus  |  Analysis: Tony Galvan (@GDataScience1)")
census %>%
ggplot(aes(pct_female, average_household_size)) +
geom_point(aes(size = farming)) +
geom_smooth(method = "lm", se = FALSE)
crops %>%
filter(sub_county == "KENYA") %>%
pivot_longer(cols = farming:khat_miraa, names_to = "crop", values_to = "pop_growing") %>%
filter(crop != "farming") %>%
mutate(crop = str_to_title(str_replace(crop, "_", " ")),
crop = fct_reorder(crop, pop_growing)) %>%
ggplot(aes(pop_growing, crop, fill = crop)) +
geom_col(show.legend = FALSE) +
scale_x_continuous(labels = comma_format()) +
expand_limits(x = c(0,1050000)) +
labs(x = "# of people growing the crop",
y = "",
title = "Kenya Crops",
subtitle = "Avocados and mangos are grown by the most people",
caption = "Source: rKenyaCensus  |  Analysis: Tony Galvan (@GDataScience1)")
# Chunk 7
# This will save your most recent plot
ggsave(
filename = "gdatascience1_202104.png",
device = "png",
width = 5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
theme_set(theme_light())
plastics <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-01-26/plastics.csv')
plastics %>%
count(year)
plastics %>%
count(country, sort = TRUE)
plastics %>%
count(parent_company, sort = TRUE)
blacklist <- c("Unbranded", "null", "Grand Total", "NULL", "Assorted")
top_pollution_companies <- plastics %>%
filter(!parent_company %in% blacklist) %>%
count(parent_company, wt = grand_total, name = "company_total", sort = TRUE) %>%
top_n(10)
plastics %>%
inner_join(top_pollution_companies, by = "parent_company") %>%
count(parent_company, year, company_total, wt = grand_total, name = "year_total", sort = TRUE) %>%
mutate(parent_company = fct_reorder(parent_company, company_total)) %>%
ggplot(aes(year_total, parent_company, fill = factor(year))) +
geom_col() +
scale_x_continuous(labels = scales::comma_format()) +
scale_fill_manual(values = c("#629677","#485665")) +
theme(legend.position = "bottom") +
labs(x = "Plastic pollution count (all types)",
y = "",
fill = "Year",
title = "Plastic Pollution: 2019 & 2020",
subtitle = "Top 10 companies with the most plastic pollution",
caption = "Source: https://www.breakfreefromplastic.org/  |  Analysis: Tony Galvan (@GDataScience1)")
tidytuesdayR::use_tidytemplate()
setwd("~/GitHub/tidytuesday")
tidytuesdayR::use_tidytemplate()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytuesdayR)
tt <- tt_load("2021-02-02")
tt
tt %>%
map(glimpse)
summary(tt)
hbcu_all <- tt$hbcu_all
hbcu_black <- tt$hbcu_black
View(hbcu_all)
View(hbcu_black)
summary(tt)
hbcu_all <- tt$hbcu_all
hbcu_black <- tt$hbcu_black
hbcu <- hbcu_all %>%
mutate(enrollment = "All") %>%
rbind(hbcu_black %>%
mutate(enrollment = "Black"))
View(hbcu)
View(hbcu)
View(hbcu)
library(janitor)
hbcu_all <- tt$hbcu_all %>% clean_names()
hbcu_black <- tt$hbcu_black %>% clean_names()
hbcu <- hbcu_all %>%
mutate(enrollment = "All") %>%
rbind(hbcu_black %>%
mutate(enrollment = "Black"))
summary(tt)
hbcu_all <- tt$hbcu_all %>% clean_names()
hbcu_black <- tt$hbcu_black %>% clean_names()
hbcu <- hbcu_all %>%
mutate(enrollment = "All") %>%
rbind(hbcu_black %>%
mutate(enrollment = "Black"))
pct_hbcu <- hbcu %>%
select(year, enrollment, total_enrollment) %>%
pct_hbcu <- hbcu %>%
select(year, enrollment, total_enrollment)
pct_hbcu <- hbcu %>%
select(year, enrollment, total_enrollment)
View(pct_hbcu)
pct_hbcu <- hbcu %>%
select(year, enrollment, total_enrollment) %>%
pivot_wider(names_from = enrollment, values_from = total_enrollment)
View(pct_hbcu)
pct_hbcu <- hbcu %>%
select(year, enrollment, total_enrollment) %>%
pivot_wider(names_from = enrollment, values_from = total_enrollment) %>%
mutate(pct_black = Black / All)
View(pct_hbcu)
pct_hbcu %>%
ggplot(aes(year, pct_black)) +
geom_line()
p <- pct_hbcu %>%
ggplot(aes(year, pct_black)) +
geom_line()
p
p + scale_y_continuous(labels = scales::percent_format())
p
p <- p + scale_y_continuous(labels = scales::percent_format())
p
p <- p + scale_y_continuous(labels = scales::percent_format(accurary = 1))
p <- pct_hbcu %>%
ggplot(aes(year, pct_black)) +
geom_line()
p <- p + scale_y_continuous(labels = scales::percent_format(accurary = 1))
p
p <- p + scale_y_continuous(labels = scales::percent_format(accuracy = 1))
p <- pct_hbcu %>%
ggplot(aes(year, pct_black)) +
geom_line()
p <- p + scale_y_continuous(labels = scales::percent_format(accuracy = 1))
p
p <- pct_hbcu %>%
ggplot(aes(year, pct_black)) +
geom_line()
p <- p +
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
p <- p +
labs(x = "",
y = "% of total enrollment",
title = "Historically Black Colleges & Universities")
p
pct_hbcu %>%
ggplot(aes(year, pct_black)) +
geom_line(size = 1.25, color = "white") +
#geom_hline(yintercept = 0.7946721, lty = 2, color = "#d2d2d2") +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(x = "",
y = "% of total enrollment",
title = tt_title,
subtitle = "2014-15: Percentage of black enrollees is the lowest since 1984",
caption = tt_caption) +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect("#5a5a5a"),
plot.background = element_rect(fill = "#5a5a5a"),
axis.title.y = element_text(color = "#d2d2d2", size = 12),
axis.text.y = element_text(color="#d2d2d2", size=10),
axis.text.x = element_text(color = "#d2d2d2", size = 10),
plot.title = element_text(color = "white", size = 16, face = "bold"),
plot.subtitle = element_text(color = "#d2d2d2", size = 14),
plot.caption = element_text(color = "#d2d2d2", size = 8))
library(scales)
pct_hbcu %>%
ggplot(aes(year, pct_black)) +
geom_line(size = 1.25, color = "white") +
#geom_hline(yintercept = 0.7946721, lty = 2, color = "#d2d2d2") +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(x = "",
y = "% of total enrollment",
title = tt_title,
subtitle = "2014-15: Percentage of black enrollees is the lowest since 1984",
caption = tt_caption) +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect("#5a5a5a"),
plot.background = element_rect(fill = "#5a5a5a"),
axis.title.y = element_text(color = "#d2d2d2", size = 12),
axis.text.y = element_text(color="#d2d2d2", size=10),
axis.text.x = element_text(color = "#d2d2d2", size = 10),
plot.title = element_text(color = "white", size = 16, face = "bold"),
plot.subtitle = element_text(color = "#d2d2d2", size = 14),
plot.caption = element_text(color = "#d2d2d2", size = 8))
pct_hbcu %>%
ggplot(aes(year, pct_black)) +
geom_line(size = 1.25, color = "white") +
#geom_hline(yintercept = 0.7946721, lty = 2, color = "#d2d2d2") +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(x = "",
y = "% of total enrollment",
title = "Historically Black Colleges & Universities",
subtitle = "2014-15: Percentage of black enrollees is the lowest since 1984",
caption = tt_caption) +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect("#5a5a5a"),
plot.background = element_rect(fill = "#5a5a5a"),
axis.title.y = element_text(color = "#d2d2d2", size = 12),
axis.text.y = element_text(color="#d2d2d2", size=10),
axis.text.x = element_text(color = "#d2d2d2", size = 10),
plot.title = element_text(color = "white", size = 16, face = "bold"),
plot.subtitle = element_text(color = "#d2d2d2", size = 14),
plot.caption = element_text(color = "#d2d2d2", size = 8))
pct_hbcu %>%
ggplot(aes(year, pct_black)) +
geom_line(size = 1.25, color = "white") +
#geom_hline(yintercept = 0.7946721, lty = 2, color = "#d2d2d2") +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(x = "",
y = "% of total enrollment",
title = "Historically Black Colleges & Universities",
subtitle = "2014-15: Percentage of black enrollees is the lowest since 1984",
caption = "source") +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect("#5a5a5a"),
plot.background = element_rect(fill = "#5a5a5a"),
axis.title.y = element_text(color = "#d2d2d2", size = 12),
axis.text.y = element_text(color="#d2d2d2", size=10),
axis.text.x = element_text(color = "#d2d2d2", size = 10),
plot.title = element_text(color = "white", size = 16, face = "bold"),
plot.subtitle = element_text(color = "#d2d2d2", size = 14),
plot.caption = element_text(color = "#d2d2d2", size = 8))
pct_hbcu %>%
ggplot(aes(year, pct_black)) +
geom_line(size = 1.25, color = "white") +
#geom_hline(yintercept = 0.7946721, lty = 2, color = "#d2d2d2") +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(x = "",
y = "% of total enrollment",
title = "Historically Black Colleges & Universities",
subtitle = "2014-15: Percentage of black enrollees is the lowest since 1984",
caption = "Source: National Center for Education Statistics | Analysis: Tony Galvan (@GDataScience1)") +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect("#5a5a5a"),
plot.background = element_rect(fill = "#5a5a5a"),
axis.title.y = element_text(color = "#d2d2d2", size = 12),
axis.text.y = element_text(color="#d2d2d2", size=10),
axis.text.x = element_text(color = "#d2d2d2", size = 10),
plot.title = element_text(color = "white", size = 16, face = "bold"),
plot.subtitle = element_text(color = "#d2d2d2", size = 14),
plot.caption = element_text(color = "#d2d2d2", size = 8))
# This will save your most recent plot
ggsave(
filename = "2021_02_02_tidy_tuesday.png",
device = "png")
