---
title: "TidyTuesday - Week 38 - Shakespeare Dialogue"
format: html
---

# TidyTuesday - Week 38 - Shakespeare Dialogue

GitHub - https://github.com/rfordatascience/tidytuesday/blob/master/data/2024/2024-09-17/readme.md

This week we're exploring dialogue in Shakespeare plays. The dataset this week comes from shakespeare.mit.edu (via github.com/nrennie/shakespeare) which is the Web's first edition of the Complete Works of William Shakespeare. The site has offered Shakespeare's plays and poetry to the internet community since 1993.

Dialogue from Hamlet, Macbeth, and Romeo and Juliet are provided for this week. Which play has the most stage directions compared to dialogue? Which play has the longest lines of dialogue? Which character speaks the most?

Thank you to Nicola Rennie for curating this week's dataset.

## Inspiration - Julia Silge's Blog

My analysis is inspired by Julia Silge's blog post: "Find high FREX and high lift words for #TidyTuesday Stranger Things dialogue" - https://juliasilge.com/blog/stranger-things/

```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)
library(tidytuesdayR)
library(scales)
library(camcorder)
library(ggtext)
library(showtext)

theme_set(theme_light())

# Font selected from http://fonts.google.com
tt_family <- "tt_family"
font_add_google("Josefin Sans", tt_family)

theme_set(theme_light(base_size = 32))

font_add(family = "fa-brands", regular = "~/Library/Fonts/Font Awesome 6 Brands-Regular-400.otf")
font_add(family = "fa-solid", regular = "~/Library/Fonts/Font Awesome 6 Free-Solid-900.otf")
showtext_auto()

# Colors selected using https://coolors.co/
tt_source <- "shakespeare.mit.edu"
bg_color <- "#DAB785"
txt_color <- "#031D44"
blue <- "#04395E"
green <- "#70A288"
orange <- "#D5896F"

tt_caption <- paste0("DataViz: Tony Galvan #TidyTuesday<span style='color:", bg_color, ";'>..</span><span style='font-family:fa-solid;color:", txt_color, ";'>&#xf0ce;</span><span style='color:", bg_color, ";'>.</span><span style='color:", txt_color, ";'>", tt_source, "</span><span style='color:", bg_color, ";'>..</span><span style='font-family:fa-brands;color:", txt_color, ";'>&#xe61b;</span><span style='color:", bg_color, ";'>.</span><span style='color:", txt_color, ";'>@GDataScience1</span><span style='color:", bg_color, ";'>..</span><span style='font-family:fa-brands;color:", txt_color, ";'>&#xf09b;</span><span style='color:", bg_color, ";'>.</span><span style='color:", txt_color, ";'>GDataScience</span><span style='color:", bg_color, ";'>..</span>")

```

# Wrangle

Explore the data and process it into a nice format for plotting! Access each dataset by name by using a dollarsign after the `tt` object and then the name of the data set.

```{r Wrangle}

hamlet <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-09-17/hamlet.csv')
macbeth <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-09-17/macbeth.csv')
romeo_juliet <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-09-17/romeo_juliet.csv')

shakespeare <-
    hamlet |>
    mutate(play = "Hamlet") |>
    bind_rows(
        macbeth |>
            mutate(play = "Macbeth")
    ) |>
    bind_rows(
        romeo_juliet |>
            mutate(play = "Romeo & Juliet")
    )

```

# Start recording

Use the {camcorder} package to record all plots that are output to the console

```{r camcorder}

# start recording
gg_record(
  dir = "~/Downloads/camcorder/2024_09_17_tidy_tuesday_shakespeare", # where to save the recording
  device = "png", # device to use to save images
  width = 6, # width of saved image
  height = 6, # height of saved image
  units = "in", # units for width and height
  dpi = 300 # dpi to use when saving image
)

```

# Visualize

Using your processed dataset, create your unique visualization.

```{r Visualize}

shakespeare |>
    filter(character != "[stage direction]") |>
    count(play, character, sort = TRUE) |>
    group_by(play) |>
    top_n(10, wt = n) |>
    ungroup() |>
    mutate(character = fct_reorder(character, n)) |>
    ggplot(aes(n, character, fill = play)) +
    geom_col() +
    scale_fill_manual(values = c(blue, green, orange)) +
    facet_wrap(~play, nrow = 1, scales = "free") +
    labs(
        x = "Number of lines",
        y = NULL,
        title = "Shakespeare Plays",
        subtitle = "Top 10 characters with the most lines",
        caption = tt_caption
    ) +
    theme(
        legend.position = "none",
        plot.background = element_rect(
            fill = bg_color
        ),
        panel.background = element_rect(
            fill = bg_color
        ),
        axis.ticks = element_blank(),
        panel.grid = element_blank(),
        panel.border = element_blank(),
        plot.title = element_markdown(
            family = tt_family,
            size = 98,
            face = "bold",
            color = txt_color
        ),
        plot.subtitle = element_markdown(
            family = tt_family,
            size = 58,
            face = "bold",
            color = txt_color
        ),
        plot.caption = element_markdown(
            family = tt_family,
            color = txt_color,
            size = 24
        ),
        axis.title = element_markdown(
            family = tt_family,
            color = txt_color,
            size = 24
        ),
        axis.text = element_markdown(
            family = tt_family,
            color = txt_color,
            size = 20
        ),
        strip.text = element_textbox_simple(
            family = tt_family,
            size = 24,
            face = "bold",
            color = txt_color,
        ),
        strip.background = element_rect(
            fill = bg_color
        )
    )

```

## Tokenize the dialogue

Create a tidy, tokenized version of the dialogue.

```{r UnnestDialogue}

library(tidytext)

tidy_dialogue <- shakespeare |>
    unnest_tokens(word, dialogue) |>
    anti_join(stop_words, by = "word")

glimpse(tidy_dialogue)

```

What words from the dialogue have the [highest log odds](https://juliasilge.github.io/tidylo/) of coming from each play?

```{r TidyLO}

library(tidylo)

p <- tidy_dialogue %>%
    count(play, word, sort = TRUE) |>
    bind_log_odds(play, word, n) |>
    filter(n > 20) |>
    group_by(play) |>
    slice_max(log_odds_weighted, n = 10) |>
    mutate(word = reorder_within(word, log_odds_weighted, play)) |>
    ggplot(aes(log_odds_weighted, word, fill = play)) +
    geom_col(show.legend = FALSE) +
    scale_fill_manual(values = c(blue, green, orange)) +
    facet_wrap(vars(play), scales = "free") +
    scale_y_reordered() +
    labs(
        x = "Weighted Log Odds",
        y = NULL,
        title = "Shakespeare Plays",
        subtitle = "Key dialogue words by play",
        caption = tt_caption
    ) +
    theme(
        legend.position = "none",
        plot.background = element_rect(
            fill = bg_color
        ),
        panel.background = element_rect(
            fill = bg_color
        ),
        axis.ticks = element_blank(),
        panel.grid = element_blank(),
        panel.border = element_blank(),
        plot.title = element_markdown(
            family = tt_family,
            size = 98,
            face = "bold",
            color = txt_color
        ),
        plot.subtitle = element_markdown(
            family = tt_family,
            size = 58,
            face = "bold",
            color = txt_color
        ),
        plot.caption = element_markdown(
            family = tt_family,
            color = txt_color,
            size = 24
        ),
        axis.title = element_markdown(
            family = tt_family,
            color = txt_color,
            size = 24
        ),
        axis.text = element_markdown(
            family = tt_family,
            color = txt_color,
            size = 20
        ),
        strip.text = element_textbox_simple(
            family = tt_family,
            size = 24,
            face = "bold",
            color = txt_color,
        ),
        strip.background = element_rect(
            fill = bg_color
        )
    )

p

```

## Train a topic model 

Create a sparse matrix and treat each scene as a document.

```{r DialogueMatrix}

dialogue_sparse <-
  tidy_dialogue |>
  mutate(document = paste(play, act, scene, sep = "_")) |>
  count(document, word) |>
  filter(n > 5) |>
  cast_sparse(document, word, n)

dim(dialogue_sparse)

```

Train a topic model with 5 topics and visualize the results

```{r TopicModel}

library(stm)
set.seed(999)
topic_model <- stm(dialogue_sparse, K = 5, verbose = FALSE)

summary(topic_model)

episode_gamma <- 
    tidy(
        topic_model, 
        matrix = "gamma",
        document_names = rownames(dialogue_sparse)
    ) |>
    separate(document, c("play", "act", "scene"), sep = "_")

episode_gamma |>
    mutate(topic = paste0("Topic ", topic)) |>
    ggplot(aes(gamma, play, fill = play)) +
    geom_boxplot(show.legend = FALSE) +
    scale_fill_manual(values = c(blue, green, orange)) +
    facet_wrap(vars(topic)) +
    labs(
        x = "Gamma",
        y = "",
        title = "Shakespeare Plays",
        subtitle = "Topic Model Results",
        caption = tt_caption
    ) +
    theme(
        legend.position = "none",
        plot.background = element_rect(
            fill = bg_color
        ),
        panel.background = element_rect(
            fill = bg_color
        ),
        axis.ticks = element_blank(),
        panel.grid = element_blank(),
        panel.border = element_blank(),
        plot.title = element_markdown(
            family = tt_family,
            size = 98,
            face = "bold",
            color = txt_color
        ),
        plot.subtitle = element_markdown(
            family = tt_family,
            size = 58,
            face = "bold",
            color = txt_color
        ),
        plot.caption = element_markdown(
            family = tt_family,
            color = txt_color,
            size = 24
        ),
        axis.title = element_markdown(
            family = tt_family,
            color = txt_color,
            size = 24
        ),
        axis.text = element_markdown(
            family = tt_family,
            color = txt_color,
            size = 20
        ),
        strip.text = element_textbox_simple(
            family = tt_family,
            size = 24,
            face = "bold",
            color = txt_color,
        ),
        strip.background = element_rect(
            fill = bg_color
        )
    )

```

# Save Image

Save your image for sharing. Be sure to use the `#TidyTuesday` hashtag in your post on twitter!

```{r}

# This will save your most recent plot
ggsave(
  plot = p,
  filename = "2024_09_17_tidy_tuesday_shakespeare.png",
  device = "png")

gg_stop_recording()

gg_playback(
  name = "2024_09_17_tidy_tuesday_shakespeare.gif",
  first_image_duration = 4,
  last_image_duration = 20,
  frame_duration = 0.5
)

```